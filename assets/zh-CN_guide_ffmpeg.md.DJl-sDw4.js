import{_ as a,c as p,a0 as t,o as r}from"./chunks/framework.CroFxgLA.js";const d=JSON.parse('{"title":"配置 FFmpeg","description":"","frontmatter":{},"headers":[],"relativePath":"zh-CN/guide/ffmpeg.md","filePath":"zh-CN/guide/ffmpeg.md","lastUpdated":1723367491000}'),n={name:"zh-CN/guide/ffmpeg.md"};function s(o,e,l,f,i,c){return r(),p("div",null,e[0]||(e[0]=[t(`<h1 id="配置-ffmpeg" tabindex="-1">配置 FFmpeg <a class="header-anchor" href="#配置-ffmpeg" aria-label="Permalink to &quot;配置 FFmpeg&quot;">​</a></h1><h2 id="ffmpeg-是什么" tabindex="-1">FFmpeg 是什么 <a class="header-anchor" href="#ffmpeg-是什么" aria-label="Permalink to &quot;FFmpeg 是什么&quot;">​</a></h2><p><a href="https://ffmpeg.org/" target="_blank" rel="noreferrer">FFmpeg</a> 是知名的开源音视频处理库，被用于许多音视频编解码相关的项目中。</p><h2 id="为什么要使用-ffmpeg" tabindex="-1">为什么要使用 FFmpeg <a class="header-anchor" href="#为什么要使用-ffmpeg" aria-label="Permalink to &quot;为什么要使用 FFmpeg&quot;">​</a></h2><p>本项目使用 FFmpeg 是为了编解码语音和视频，以使 LLOneBot 以 QQ 支持的格式处理语音和视频文件。</p><p>如果你的 Bot 没有处理语音和视频的需求，可以选择不安装 FFmpeg。</p><h2 id="安装-ffmpeg" tabindex="-1">安装 FFmpeg <a class="header-anchor" href="#安装-ffmpeg" aria-label="Permalink to &quot;安装 FFmpeg&quot;">​</a></h2><h3 id="windows-系统" tabindex="-1">Windows 系统 <a class="header-anchor" href="#windows-系统" aria-label="Permalink to &quot;Windows 系统&quot;">​</a></h3><ol><li>在 <a href="https://www.gyan.dev/ffmpeg/builds/ffmpeg-git-essentials.7z" target="_blank" rel="noreferrer">此处</a> 下载官方许可的 FFmpeg；</li><li>将其中的文件夹解压至一个你知道的地方（例如 <code>C:\\Program Files</code>），然后重命名为 <code>ffmpeg</code>；</li><li>你的 <code>ffmpeg</code> 文件夹的结构看起来应该是这样的：<div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>ffmpeg</span></span>
<span class="line"><span>|___bin</span></span>
<span class="line"><span>|___|___ffmpeg.exe</span></span>
<span class="line"><span>|___|___ffplay.exe</span></span>
<span class="line"><span>|___\\___ffprobe.exe</span></span>
<span class="line"><span>|___doc</span></span>
<span class="line"><span>|___\\ ...</span></span>
<span class="line"><span>|___LICENSE</span></span>
<span class="line"><span>\\___README.txt</span></span></code></pre></div><div class="danger custom-block"><p class="custom-block-title">注意</p><p><strong>请一定要保证 <code>bin</code> 文件夹内同时包含 <code>ffmpeg.exe</code>、<code>ffplay.exe</code> 以及 <code>ffprobe.exe</code>！</strong> 否则会产生意想不到的错误。</p></div></li><li>启动 QQNT，前往 LLOneBot 设置页，选择 FFmpeg 为刚才解压的 <code>ffmpeg.exe</code>（在本例中，FFmpeg 主程序位于 <code>C:\\Program Files\\ffmpeg\\bin\\ffmpeg.exe</code>）， 然后点击「保存」按钮；</li><li>如果没有任何错误出现，说明 FFmpeg 已经配置成功了。恭喜你！</li></ol><div class="tip custom-block"><p class="custom-block-title">如果有其他程序也需要使用 FFmpeg</p><p>如果其他程序支持手动选择 FFmpeg 位置，只需选择为 LLOneBot 所使用的 FFmpeg 即可。</p><p>如果其他程序不支持手动选择 FFmpeg 位置，只需将 FFmpeg 的 <code>bin</code> 目录注册到系统的 <code>PATH</code> 变量中（可参考 <a href="https://zhuanlan.zhihu.com/p/595750538#:~:text=Step%203%3A%20%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F%20Path%20%E7%9A%84%E6%B7%BB%E5%8A%A0" target="_blank" rel="noreferrer">此教程</a>）即可。</p><p>如果你将 FFmpeg 安装到了系统变量中，那么无论有没有在 LLOneBot 中配置 FFmpeg 路径也可以正常使用 FFmpeg。</p></div><h3 id="linux-系统" tabindex="-1">Linux 系统 <a class="header-anchor" href="#linux-系统" aria-label="Permalink to &quot;Linux 系统&quot;">​</a></h3><p>请使用你所使用的系统的包管理器直接安装 <code>ffmpeg</code> 即可正常使用。</p><h3 id="macos-系统" tabindex="-1">macOS 系统 <a class="header-anchor" href="#macos-系统" aria-label="Permalink to &quot;macOS 系统&quot;">​</a></h3><p>你可以使用 <a href="https://brew.sh/" target="_blank" rel="noreferrer">Homebrew</a> 安装 FFmpeg，也可以 <a href="https://evermeet.cx/ffmpeg/" target="_blank" rel="noreferrer">在此处</a> 手动下载二进制文件安装。</p><p>注意如果你选择手动安装，请确保你下载并安装了 <a href="https://evermeet.cx/ffmpeg/#:~:text=static%20%2D%2Ddisable%2Dffplay-,FFmpeg,-ffmpeg%2D114296%2Dg5ff0eb34d2" target="_blank" rel="noreferrer">FFmpeg</a>、<a href="https://evermeet.cx/ffmpeg/#:~:text=external%20ffmpeg%20libraries-,FFprobe,-ffprobe%2D114296%2Dg5ff0eb34d2" target="_blank" rel="noreferrer">FFprobe</a> 以及 <a href="https://evermeet.cx/ffmpeg/#:~:text=external%20ffprobe%20libraries-,FFplay,-ffplay%2D113169%2Dge1c1dc8347" target="_blank" rel="noreferrer">FFplay</a> 三个库，否则可能会产生意想不到的错误。</p>`,15)]))}const g=a(n,[["render",s]]);export{d as __pageData,g as default};
